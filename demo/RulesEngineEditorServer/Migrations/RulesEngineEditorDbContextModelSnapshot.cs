// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RulesEngineEditor.Data;

#nullable disable

namespace RulesEngineEditorServer.Migrations
{
    [DbContext(typeof(RulesEngineEditorDbContext))]
    partial class RulesEngineEditorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RulesEngineEditor.Models.RuleData", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Actions")
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Expression")
                        .HasColumnType("longtext");

                    b.Property<string>("Operator")
                        .HasColumnType("longtext");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext");

                    b.Property<int?>("RuleDataId")
                        .HasColumnType("int");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("int");

                    b.Property<string>("RuleName")
                        .HasColumnType("longtext");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("SuccessEvent")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkflowDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RuleDataId");

                    b.HasIndex("WorkflowDataId");

                    b.ToTable("Rules", (string)null);
                });

            modelBuilder.Entity("RulesEngineEditor.Models.ScopedParamData", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Expression")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("RuleDataId")
                        .HasColumnType("int");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RuleDataId");

                    b.HasIndex("WorkflowDataId");

                    b.ToTable("ScopedParam", (string)null);
                });

            modelBuilder.Entity("RulesEngineEditor.Models.WorkflowData", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RuleExpressionType")
                        .HasColumnType("int");

                    b.Property<int>("Seq")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Workflows", (string)null);
                });

            modelBuilder.Entity("RulesEngineEditor.Models.RuleData", b =>
                {
                    b.HasOne("RulesEngineEditor.Models.RuleData", null)
                        .WithMany("Rules")
                        .HasForeignKey("RuleDataId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RulesEngineEditor.Models.WorkflowData", null)
                        .WithMany("Rules")
                        .HasForeignKey("WorkflowDataId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("RulesEngineEditor.Models.ScopedParamData", b =>
                {
                    b.HasOne("RulesEngineEditor.Models.RuleData", null)
                        .WithMany("LocalParams")
                        .HasForeignKey("RuleDataId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("RulesEngineEditor.Models.WorkflowData", null)
                        .WithMany("GlobalParams")
                        .HasForeignKey("WorkflowDataId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("RulesEngineEditor.Models.RuleData", b =>
                {
                    b.Navigation("LocalParams");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("RulesEngineEditor.Models.WorkflowData", b =>
                {
                    b.Navigation("GlobalParams");

                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
